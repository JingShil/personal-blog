{"ast":null,"code":"import axios from 'axios';\nimport router from '../router';\nimport { ElMessage, ElMessageBox } from 'element-plus';\n// 创建一个axios实例\nconst service = axios.create({\n  baseURL: 'http://localhost:8081' // 请求的基础URL\n  // timeout: 20000 // 请求超时时间\n});\n\n// 请求拦截器\n// service.interceptors.request.use(\n//   config => {\n//     let accessToken = localStorage.getItem('token');\n//     if (accessToken) {\n//       config.headers = Object.assign({\n//         Authorization: `${accessToken}`\n//       }, config.headers);\n//     }\n//     return config;\n//   },\n//   error => {\n//     return Promise.reject(error);\n//   }\n// );\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  if (localStorage.getItem('token')) {\n    config.headers['Token'] = localStorage.getItem('token'); // 让每个请求携带自定义token\n  } else {\n    return config;\n  }\n  if (localStorage.getItem('userInfo')) {\n    config.headers['UserId'] = JSON.parse(localStorage.getItem('userInfo')).id;\n  }\n  return config;\n}, error => {\n  // 对请求错误做些什么\n\n  Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  // 处理响应数据\n  console.log(response.data);\n  return response.data;\n}, error => {\n  ElMessageBox.confirm('网luo错误', 'Warning', {\n    confirmButtonText: '确认',\n    cancelButtonText: '取消',\n    type: 'warning'\n  }).then(() => {\n    deleteArticle(articleId).then(res => {\n      getList();\n      if (res.code == 1) {\n        ElMessage({\n          type: 'success',\n          message: '删除成功'\n        });\n      } else {\n        ElMessage({\n          type: 'info',\n          message: '删除失败'\n        });\n      }\n    });\n  }).catch(() => {\n    ElMessage({\n      type: 'info',\n      message: '取消'\n    });\n  });\n  // 处理响应错误\n  // console.log(error)\n  // if (error.response && error.response.status === 401) {\n  //   // 收到401未授权错误，重定向到登录页面\n  //   router.push('/login');\n  // }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","router","ElMessage","ElMessageBox","service","create","baseURL","interceptors","request","use","config","localStorage","getItem","headers","JSON","parse","id","error","Promise","reject","response","console","log","data","confirm","confirmButtonText","cancelButtonText","type","then","deleteArticle","articleId","res","getList","code","message","catch"],"sources":["E:/java项目/blog/blog-front/src/utils/request.js"],"sourcesContent":["import axios from 'axios';\r\nimport router from '../router'\r\nimport { ElMessage, ElMessageBox } from 'element-plus'\r\n// 创建一个axios实例\r\nconst service = axios.create({\r\n  baseURL: 'http://localhost:8081', // 请求的基础URL\r\n  // timeout: 20000 // 请求超时时间\r\n});\r\n\r\n// 请求拦截器\r\n// service.interceptors.request.use(\r\n//   config => {\r\n//     let accessToken = localStorage.getItem('token');\r\n//     if (accessToken) {\r\n//       config.headers = Object.assign({\r\n//         Authorization: `${accessToken}`\r\n//       }, config.headers);\r\n//     }\r\n//     return config;\r\n//   },\r\n//   error => {\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // 在发送请求之前做些什么\r\n    if (localStorage.getItem('token')) {\r\n      config.headers['Token'] = localStorage.getItem('token'); // 让每个请求携带自定义token\r\n    }else{\r\n      return config;\r\n    }\r\n    if(localStorage.getItem('userInfo')){\r\n      config.headers['UserId'] = JSON.parse(localStorage.getItem('userInfo')).id;\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  error => {\r\n    // 对请求错误做些什么\r\n\r\n    Promise.reject(error);\r\n  }\r\n);\r\n\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n \r\n  response => {\r\n    // 处理响应数据\r\n    console.log(response.data)\r\n    return response.data;\r\n  },\r\n  error => {\r\n    ElMessageBox.confirm(\r\n      '网luo错误',\r\n      'Warning',\r\n      {\r\n        confirmButtonText: '确认',\r\n        cancelButtonText: '取消',\r\n        type: 'warning',\r\n      }\r\n    )\r\n      .then(() => {\r\n        deleteArticle(articleId)\r\n        .then(res=>{\r\n          getList();\r\n          if(res.code==1){\r\n            ElMessage({\r\n              type: 'success',\r\n              message: '删除成功',\r\n            })\r\n            \r\n          }else{\r\n            ElMessage({\r\n              type: 'info',\r\n              message: '删除失败',\r\n            })\r\n          }\r\n        })\r\n        \r\n      })\r\n      .catch(() => {\r\n        ElMessage({\r\n          type: 'info',\r\n          message: '取消',\r\n        })\r\n      })\r\n    // 处理响应错误\r\n    // console.log(error)\r\n    // if (error.response && error.response.status === 401) {\r\n    //   // 收到401未授权错误，重定向到登录页面\r\n    //   router.push('/login');\r\n    // }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default service;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAASC,SAAS,EAAEC,YAAY,QAAQ,cAAc;AACtD;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC3BC,OAAO,EAAE,uBAAuB,CAAE;EAClC;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,OAAO,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAI;EACR;EACA,IAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAE;IACjCF,MAAM,CAACG,OAAO,CAAC,OAAO,CAAC,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC3D,CAAC,MAAI;IACH,OAAOF,MAAM;EACf;EACA,IAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,EAAC;IAClCF,MAAM,CAACG,OAAO,CAAC,QAAQ,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,CAACI,EAAE;EAC5E;EAEA,OAAON,MAAM;AACf,CAAC,EACDO,KAAK,IAAI;EACP;;EAEAC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AACvB,CACF,CAAC;;AAGD;AACAb,OAAO,CAACG,YAAY,CAACa,QAAQ,CAACX,GAAG,CAE/BW,QAAQ,IAAI;EACV;EACAC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACG,IAAI,CAAC;EAC1B,OAAOH,QAAQ,CAACG,IAAI;AACtB,CAAC,EACDN,KAAK,IAAI;EACPd,YAAY,CAACqB,OAAO,CAClB,QAAQ,EACR,SAAS,EACT;IACEC,iBAAiB,EAAE,IAAI;IACvBC,gBAAgB,EAAE,IAAI;IACtBC,IAAI,EAAE;EACR,CACF,CAAC,CACEC,IAAI,CAAC,MAAM;IACVC,aAAa,CAACC,SAAS,CAAC,CACvBF,IAAI,CAACG,GAAG,IAAE;MACTC,OAAO,CAAC,CAAC;MACT,IAAGD,GAAG,CAACE,IAAI,IAAE,CAAC,EAAC;QACb/B,SAAS,CAAC;UACRyB,IAAI,EAAE,SAAS;UACfO,OAAO,EAAE;QACX,CAAC,CAAC;MAEJ,CAAC,MAAI;QACHhC,SAAS,CAAC;UACRyB,IAAI,EAAE,MAAM;UACZO,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EAEJ,CAAC,CAAC,CACDC,KAAK,CAAC,MAAM;IACXjC,SAAS,CAAC;MACRyB,IAAI,EAAE,MAAM;MACZO,OAAO,EAAE;IACX,CAAC,CAAC;EACJ,CAAC,CAAC;EACJ;EACA;EACA;EACA;EACA;EACA;EACA,OAAOhB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
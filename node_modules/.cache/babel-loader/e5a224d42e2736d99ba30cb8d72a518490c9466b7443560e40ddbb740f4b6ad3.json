{"ast":null,"code":"import axios from 'axios';\n\n// 创建一个axios实例\nconst service = axios.create({\n  baseURL: 'http://localhost:8081',\n  // 请求的基础URL\n  timeout: 100000 // 请求超时时间\n});\n\n// 请求拦截器\n// service.interceptors.request.use(\n//   config => {\n//     let accessToken = localStorage.getItem('token');\n//     if (accessToken) {\n//       config.headers = Object.assign({\n//         Authorization: `${accessToken}`\n//       }, config.headers);\n//     }\n//     return config;\n//   },\n//   error => {\n//     return Promise.reject(error);\n//   }\n// );\n// service.interceptors.request.use(\n//   config => {\n//     // 在发送请求之前做些什么\n//     if (localStorage.getItem('token')) {\n//       config.headers['Token'] = localStorage.getItem('token'); // 让每个请求携带自定义token\n//     }\n//     return config;\n//   },\n//   error => {\n//     // 对请求错误做些什么\n//     console.log(error); // for debug\n//     Promise.reject(error);\n//   }\n// );\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  // 处理响应数据\n  return response.data;\n}, error => {\n  // 处理响应错误\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","service","create","baseURL","timeout","interceptors","response","use","data","error","Promise","reject"],"sources":["E:/java项目/test/blog/blog-front/src/utils/request.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// 创建一个axios实例\r\nconst service = axios.create({\r\n  baseURL: 'http://localhost:8081', // 请求的基础URL\r\n  timeout: 100000 // 请求超时时间\r\n});\r\n\r\n// 请求拦截器\r\n// service.interceptors.request.use(\r\n//   config => {\r\n//     let accessToken = localStorage.getItem('token');\r\n//     if (accessToken) {\r\n//       config.headers = Object.assign({\r\n//         Authorization: `${accessToken}`\r\n//       }, config.headers);\r\n//     }\r\n//     return config;\r\n//   },\r\n//   error => {\r\n//     return Promise.reject(error);\r\n//   }\r\n// );\r\n// service.interceptors.request.use(\r\n//   config => {\r\n//     // 在发送请求之前做些什么\r\n//     if (localStorage.getItem('token')) {\r\n//       config.headers['Token'] = localStorage.getItem('token'); // 让每个请求携带自定义token\r\n//     }\r\n//     return config;\r\n//   },\r\n//   error => {\r\n//     // 对请求错误做些什么\r\n//     console.log(error); // for debug\r\n//     Promise.reject(error);\r\n//   }\r\n// );\r\n\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n  response => {\r\n    // 处理响应数据\r\n    return response.data;\r\n  },\r\n  error => {\r\n    // 处理响应错误\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default service;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC3BC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE,MAAM,CAAC;AAClB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACAH,OAAO,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC/BD,QAAQ,IAAI;EACV;EACA,OAAOA,QAAQ,CAACE,IAAI;AACtB,CAAC,EACDC,KAAK,IAAI;EACP;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeR,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
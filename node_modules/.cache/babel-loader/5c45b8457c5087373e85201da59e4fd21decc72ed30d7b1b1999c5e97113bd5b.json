{"ast":null,"code":"import { createRouter, createWebHashHistory } from 'vue-router';\nconst routes = [{\n  path: '/',\n  name: 'home',\n  component: () => import('../views/layout/Index.vue'),\n  children: [{\n    path: '/',\n    name: '首页',\n    component: () => import('../views/home/Index.vue')\n  }, {\n    path: '/blog',\n    name: '博文',\n    component: () => import('../views/blog/Index.vue')\n  }, {\n    path: '/edit',\n    name: '编辑',\n    component: () => import('../views/edit/Index.vue')\n  }, {\n    path: '/user',\n    name: '用户',\n    component: () => import('../views/user/Index.vue')\n  }]\n}, {\n  path: '/login',\n  name: '登陆',\n  component: () => import('../views/login/Index.vue')\n}, {\n  path: '/test',\n  name: '测试',\n  component: () => import('../views/test/Index.vue')\n}];\n// 在此处进行配置全局的路由守卫（全局前置钩子）\n// 目的是：判断当前用户中本地存储是否有token，使用户在登录之前，只能访问到/login页面，其他的页面是访问不到的。\nrouter.beforeEach((to, from, next) => {\n  // to 即将进入的路由\n  // from 在哪个路由进入的\n  // next 放行\n  //   console.log(to); //打印的是页面要跳转到的路由,例如：它下面的path：为\"/login\"\n  let token = localStorage.getItem(\"token\") || \"\"; //在本地存储中获取token\n  if (token) {\n    //判断是否有token\n    next();\n  } else {\n    //在没有token的前提下，to下面的path是否为/login，如果不是则页面跳转到登录页面\n    if (to.path == \"/login\") {\n      next();\n    } else {\n      next({\n        path: \"/login\"\n      }); //跳转页面到login页\n    }\n  }\n});\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHashHistory","routes","path","name","component","children","router","beforeEach","to","from","next","token","localStorage","getItem","history"],"sources":["E:/java项目/test/blog/blog-front/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHashHistory } from 'vue-router'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'home',\n    component: () => import('../views/layout/Index.vue'),\n    children:[\n      {\n        path: '/',\n        name: '首页',\n        component: ()=>import('../views/home/Index.vue'),\n      },\n      {\n        path: '/blog',\n        name: '博文',\n        component: ()=>import('../views/blog/Index.vue'),\n      },\n      {\n        path: '/edit',\n        name: '编辑',\n        component: ()=>import('../views/edit/Index.vue'),\n      },\n      {\n        path: '/user',\n        name: '用户',\n        component: ()=>import('../views/user/Index.vue'),\n      },\n     \n    ]\n  },\n  {\n    path: '/login',\n    name: '登陆',\n    component: ()=>import('../views/login/Index.vue'),\n  },\n  {\n    path: '/test',\n    name: '测试',\n    component: ()=>import('../views/test/Index.vue'),\n  },\n]\n// 在此处进行配置全局的路由守卫（全局前置钩子）\n// 目的是：判断当前用户中本地存储是否有token，使用户在登录之前，只能访问到/login页面，其他的页面是访问不到的。\nrouter.beforeEach((to, from, next) => {\n  // to 即将进入的路由\n  // from 在哪个路由进入的\n  // next 放行\n  //   console.log(to); //打印的是页面要跳转到的路由,例如：它下面的path：为\"/login\"\n  let token = localStorage.getItem(\"token\") || \"\"; //在本地存储中获取token\n  if (token) {\n    //判断是否有token\n    next();\n  } else {\n    //在没有token的前提下，to下面的path是否为/login，如果不是则页面跳转到登录页面\n    if (to.path == \"/login\") {\n      next();\n    } else {\n      next({ path: \"/login\" }); //跳转页面到login页\n    }\n  }\n});\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n})\n\nexport default router\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,oBAAoB,QAAQ,YAAY;AAE/D,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,2BAA2B,CAAC;EACpDC,QAAQ,EAAC,CACP;IACEH,IAAI,EAAE,GAAG;IACTC,IAAI,EAAE,IAAI;IACVC,SAAS,EAAEA,CAAA,KAAI,MAAM,CAAC,yBAAyB;EACjD,CAAC,EACD;IACEF,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,IAAI;IACVC,SAAS,EAAEA,CAAA,KAAI,MAAM,CAAC,yBAAyB;EACjD,CAAC,EACD;IACEF,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,IAAI;IACVC,SAAS,EAAEA,CAAA,KAAI,MAAM,CAAC,yBAAyB;EACjD,CAAC,EACD;IACEF,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE,IAAI;IACVC,SAAS,EAAEA,CAAA,KAAI,MAAM,CAAC,yBAAyB;EACjD,CAAC;AAGL,CAAC,EACD;EACEF,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,IAAI;EACVC,SAAS,EAAEA,CAAA,KAAI,MAAM,CAAC,0BAA0B;AAClD,CAAC,EACD;EACEF,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,IAAI;EACVC,SAAS,EAAEA,CAAA,KAAI,MAAM,CAAC,yBAAyB;AACjD,CAAC,CACF;AACD;AACA;AACAE,MAAM,CAACC,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC;EACA;EACA;EACA;EACA,IAAIC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;EACjD,IAAIF,KAAK,EAAE;IACT;IACAD,IAAI,CAAC,CAAC;EACR,CAAC,MAAM;IACL;IACA,IAAIF,EAAE,CAACN,IAAI,IAAI,QAAQ,EAAE;MACvBQ,IAAI,CAAC,CAAC;IACR,CAAC,MAAM;MACLA,IAAI,CAAC;QAAER,IAAI,EAAE;MAAS,CAAC,CAAC,CAAC,CAAC;IAC5B;EACF;AACF,CAAC,CAAC;AACF,MAAMI,MAAM,GAAGP,YAAY,CAAC;EAC1Be,OAAO,EAAEd,oBAAoB,CAAC,CAAC;EAC/BC;AACF,CAAC,CAAC;AAEF,eAAeK,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}